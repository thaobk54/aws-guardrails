AWSTemplateFormatVersion: 2010-09-09
Description: >-
  It will setup an automated response to an access denied event that occurs within a CloudTrail event, 
  a Failed authentication attempt to the AWS console, or a Client.UnauthorizedOperation event occurs.

  You will be billed for the AWS resources used if you create a stack from this
  template.
Parameters:
  SlackHookUrl:
    Type: String
    Description: Enter the SlackChannel Hook URL. Blank for none.
  SlackChannel:
    Type: String
    Description: Enter the SlackChannel to be notified. Blank for none.
  ChimeHookUrl:
    Type: String
    Description: Enter the Chime Hook URL. Blank for none.
  APIKey:
    Type: String
    Description: Key for the WhoisXMLAPI. Leave as blank to skip IP detail lookup
  LambdaS3BucketName:
    Type: String
    Description: Bucket name where lambda functions reside
    Default: sydney-summit-incident-response
  PublishLambdaS3KeyName:
    Type: String
    Description: The zip file name of the lambda functions to publish security messages
    Default: publish-security-messages.zip
  GenerateMessagesLambdaS3KeyName:
    Type: String
    Description: The zip file name of the lambda functions to generate security messages
    Default: generate-security-messages.zip
  CloudtrailLogGroupName:
    Type: String
    Description: The cloudwatch log group name of created trail
    Default: cloudtrail-log-group

Conditions:
  CreateChimePublisher : !Not [!Equals ['', !Ref ChimeHookUrl]]
  CreateSlackPublisher : !Or [!Not [!Equals ['', !Ref SlackHookUrl]],!Not [!Equals ['', !Ref SlackChannel]]]

Resources:
  PublishSecurityMessageLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              lambda.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      Path: /

      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                Effect: Allow
                Resource: 'arn:aws:logs:*:*:*'
              - Action:
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: sec-ir-LambdaMaintenancePolicy

  SecurityMessagesTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: sec-ir-SecurityMessages
      TopicName: SecurityMessages
  
  # SecurityMessageChimeSubscription:
  #   Type: 'AWS::SNS::Subscription'
  #   Condition: CreateChimePublisher
  #   DependsOn: 
  #     - 'SecurityMessagesTopic'
  #     - 'PublishSecurityMessageToChimeLambda'
  #   Properties:
  #     Endpoint: 
  #       Fn::GetAtt:
  #             - 'PublishSecurityMessageToChimeLambda'
  #             - 'Arn'
  #     Protocol: 'lambda'
  #     TopicArn: !Ref 'SecurityMessagesTopic'
  
  SecurityMessageSlackSubscription:
    Type: 'AWS::SNS::Subscription'
    Condition: CreateSlackPublisher
    DependsOn: 
      - 'SecurityMessagesTopic'
      - 'PublishSecurityMessageToSlackLambda'
    Properties:
      Endpoint: 
        Fn::GetAtt:
              - 'PublishSecurityMessageToSlackLambda'
              - 'Arn'
      Protocol: 'lambda'
      TopicArn: !Ref 'SecurityMessagesTopic'

  PublishSecurityMessageToSlackLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Condition: CreateSlackPublisher
    Properties:
      Action: 'lambda:InvokeFunction'
      #EventSourceToken: String
      FunctionName: !GetAtt PublishSecurityMessageToSlackLambda.Arn
      Principal: 'sns.amazonaws.com'
      #SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref SecurityMessagesTopic

  PublishSecurityMessageToSlackLambda:
    Type: 'AWS::Lambda::Function'
    Condition: CreateSlackPublisher
    Properties:
      FunctionName: sec-ir-PublishSecuirtyMessageToSlack
      Handler: index.publish_to_slack_handler
      Role: !GetAtt PublishSecurityMessageLambdaExecutionRole.Arn
      Environment:
        Variables:
          SlackHookUrl: !Ref SlackHookUrl
          SlackChannel: !Ref SlackChannel
      Code:
        S3Bucket:
          Ref: LambdaS3BucketName
        S3Key:
          Ref: PublishLambdaS3KeyName
      Runtime: python3.9
      Timeout: '300'

  # PublishSecurityMessageToChimeLambdaPermission:
  #   Type: 'AWS::Lambda::Permission'
  #   Condition: CreateChimePublisher
  #   Properties:
  #     Action: 'lambda:InvokeFunction'
  #     #EventSourceToken: String
  #     FunctionName: !GetAtt PublishSecurityMessageToChimeLambda.Arn
  #     Principal: 'sns.amazonaws.com'
  #     #SourceAccount: !Ref 'AWS::AccountId'
  #     SourceArn: !Ref SecurityMessagesTopic

  # PublishSecurityMessageToChimeLambda:
  #   Type: 'AWS::Lambda::Function'
  #   Condition: CreateChimePublisher
  #   Properties:
  #     FunctionName: sec-ir-PublishSecuirtyMessageToChime
  #     Handler: index.publish_to_chime_handler
  #     Role: !GetAtt PublishSecurityMessageLambdaExecutionRole.Arn
  #     Environment:
  #       Variables:
  #         ChimeHookUrl: !Ref ChimeHookUrl
  #     Code:
  #       S3Bucket:
  #         Ref: LambdaS3BucketName
  #       S3Key:
  #         Ref: PublishLambdaS3KeyName
  #     Runtime: python3.9
  #     Timeout: '300'
      

  PublishSecurityMessageExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              lambda.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      Path: /

      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                Effect: Allow
                Resource: 'arn:aws:logs:*:*:*'
              - Action:
                  - 'logs:PutLogEvents'
                  - 'cloudtrail:LookupEvents'
                  - 'sns:*'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: sec-ir-LambdaCloudTrailPolicy

  AccessDeniedCloudwatchEvent:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern: {
        'detail': {
          'errorMessage': [
            'Access Denied',
            'Failed authentication'
          ]
        }
      }
      Name: sec-ir-AccessDeniedEvent
      State: "ENABLED"
      Targets:
        -
          Arn:
            Ref: 'AccessDeniedTopic'
          Id: 'TargetTopic'
    DependsOn: 'AccessDeniedTopic'

  YouAreNotAuthCloudwatchEvent:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern: {
        'detail': {
          'errorCode': [
            'Client.UnauthorizedOperation'
          ]
        }
      }
      Name: sec-ir-YouAreNotAuthEvent
      State: "ENABLED"
      Targets:
        -
          Arn:
            Ref: 'AccessDeniedTopic'
          Id: 'TargetTopic'
    DependsOn: 'AccessDeniedTopic'

  UnauthorizedActivityAttemptMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: sec-ir-UnauthorizedActivityAttempt
      LogGroupName: !Ref CloudtrailLogGroupName
      FilterPattern: "{ ($.eventSource = \"signin.amazonaws.com\") && ($.errorMessage = \"Failed authentication\") }"
      MetricTransformations: 
        -
          MetricValue: "1"
          MetricNamespace: CloudtrailMetric
          MetricName: UnauthorizedActivityAttempt

  UnauthorizedActivityAttemptAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: sec-ir-UnauthorizedActivityAttempt
      AlarmDescription: Multiple unauthorized actions or logins attempted
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 1
      MetricName: UnauthorizedActivityAttempt
      Namespace: CloudtrailMetric
      Period: 60
      AlarmActions:
        - !Ref AccessDeniedTopic
    DependsOn: 'AccessDeniedTopic'

  AWSConsoleLoginFail:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern: {
        'eventSource': [
          "signin.amazonaws.com"
        ]
      }
      Name: sec-ir-AWSConsoleLoginFail
      State: "ENABLED"
      Targets:
        -
          Arn:
            Ref: 'AccessDeniedTopic'
          Id: 'TargetTopic'
    DependsOn: 'AccessDeniedTopic'

  PublishSecurityMessageToSlackLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Condition: CreateSlackPublisher
    Properties:
      Action: 'lambda:InvokeFunction'
      #EventSourceToken: String
      FunctionName: !GetAtt PublishSecurityMessageToSlackLambda.Arn
      Principal: 'sns.amazonaws.com'
      #SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref SecurityMessagesTopic

  AccessDeniedTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: sec-ir-AccessDeniedTopic
      TopicName: AccessDeniedTopic
  
  AccessDeniedTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: "events.amazonaws.com"
          Action: sns:Publish
          Resource: !Ref 'AccessDeniedTopic'
        - Sid: "cloudwatchAlarmPolicy"
          Effect: Allow
          Principal:
            Service: "cloudwatch.amazonaws.com"
          Action: sns:Publish
          Resource: !Ref 'AccessDeniedTopic'
      Topics:
      - !Ref AccessDeniedTopic
    DependsOn: 
        - 'AccessDeniedTopic'

  AccessDeniedPublishAccessDeniedSubscription:
    Type: 'AWS::SNS::Subscription'
    DependsOn: 
      - 'AccessDeniedTopic'
      - 'PublishAccessDeniedLambda'
    Properties:
      Endpoint: 
        Fn::GetAtt:
              - 'PublishAccessDeniedLambda'
              - 'Arn'
      Protocol: 'lambda'
      TopicArn: !Ref 'AccessDeniedTopic'

  AccessDeniedPublishIAMHistorSubscription:
    Type: 'AWS::SNS::Subscription'
    Condition: CreateChimePublisher
    DependsOn: 
      - 'AccessDeniedTopic'
      - 'PublishUserIAMHistoryLambda'
    Properties:
      Endpoint: 
        Fn::GetAtt:
              - 'PublishUserIAMHistoryLambda'
              - 'Arn'
      Protocol: 'lambda'
      TopicArn: !Ref 'AccessDeniedTopic'

  AccessDeniedUserTrailsSubscription:
    Type: 'AWS::SNS::Subscription'
    DependsOn: 
      - 'AccessDeniedTopic'
      - 'PublishUserTrailsHistoryLambda'
    Properties:
      Endpoint: 
        Fn::GetAtt:
              - 'PublishUserTrailsHistoryLambda'
              - 'Arn'
      Protocol: 'lambda'
      TopicArn: !Ref 'AccessDeniedTopic'
  
  UnauthorizedLoginAttemptSubscription:
    Type: 'AWS::SNS::Subscription'
    DependsOn: 
      - 'AccessDeniedTopic'
      - 'UnauthorizedLoginAttemptLambda'
    Properties:
      Endpoint: 
        Fn::GetAtt:
              - 'UnauthorizedLoginAttemptLambda'
              - 'Arn'
      Protocol: 'lambda'
      TopicArn: !Ref 'AccessDeniedTopic'

  PublishUserAccessDeniedLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      #EventSourceToken: String
      FunctionName: !GetAtt PublishAccessDeniedLambda.Arn
      Principal: 'sns.amazonaws.com'
      #SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref AccessDeniedTopic

  PublishAccessDeniedLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: sec-ir-PublishAccessDenied
      Handler: index.access_denied_handler
      Role: !GetAtt PublishSecurityMessageExecutionRole.Arn
      Environment:
        Variables:
          TopicTarget: !Ref SecurityMessagesTopic
          APIKey: !Ref APIKey
      Code:
        S3Bucket:
          Ref: LambdaS3BucketName
        S3Key:
          Ref: GenerateMessagesLambdaS3KeyName
      Runtime: python3.9
      Timeout: '300'

  PublishUserIAMUserHistoryLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      #EventSourceToken: String
      FunctionName: !GetAtt PublishUserIAMHistoryLambda.Arn
      Principal: 'sns.amazonaws.com'
      #SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref AccessDeniedTopic

  PublishUserIAMHistoryLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: sec-ir-PublishIAMUserHistory
      Handler: index.publish_iam_user_history
      Role: !GetAtt PublishSecurityMessageExecutionRole.Arn
      Environment:
        Variables:
          TopicTarget: !Ref SecurityMessagesTopic
          APIKey: !Ref APIKey
      Code:
        S3Bucket:
          Ref: LambdaS3BucketName
        S3Key:
          Ref: GenerateMessagesLambdaS3KeyName
      Runtime: python3.9
      Timeout: '300'

  PublishUserTrailsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      #EventSourceToken: String
      FunctionName: !GetAtt PublishUserTrailsHistoryLambda.Arn
      Principal: 'sns.amazonaws.com'
      #SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref AccessDeniedTopic

  PublishUserTrailsHistoryLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: sec-ir-PublishUserTrailsHistory
      Handler: index.publish_user_history
      Role: !GetAtt PublishSecurityMessageExecutionRole.Arn
      Environment:
        Variables:
          TopicTarget: !Ref SecurityMessagesTopic
          APIKey: !Ref APIKey
      Code:
        S3Bucket:
          Ref: LambdaS3BucketName
        S3Key:
          Ref: GenerateMessagesLambdaS3KeyName
      Runtime: python3.9
      Timeout: '300'

  UnauthorizedLoginAttemptLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      #EventSourceToken: String
      FunctionName: !GetAtt UnauthorizedLoginAttemptLambda.Arn
      Principal: 'sns.amazonaws.com'
      #SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref AccessDeniedTopic
  
  UnauthorizedLoginAttemptLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: sec-ir-UnauthorizedLoginAttempt
      Handler: index.unauthorize_login_attempt
      Role: !GetAtt PublishSecurityMessageExecutionRole.Arn
      Environment:
        Variables:
          TopicTarget: !Ref SecurityMessagesTopic
          APIKey: !Ref APIKey
      Code:
        S3Bucket:
          Ref: LambdaS3BucketName
        S3Key:
          Ref: GenerateMessagesLambdaS3KeyName
      Runtime: python3.9
      Timeout: '300'
